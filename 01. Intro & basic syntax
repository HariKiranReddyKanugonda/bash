INTRODUCTION: 

Bash scripting is a powerful way to automate tasks on Unix-like operating systems such as Linux and macOS. 
It involves writing simple text files, called scripts, that contain a series of commands executed by the Bash shell. 
These scripts can perform a variety of functions, from automating repetitive tasks, managing files, or even running system commands.

A typical Bash script contains:
- **Variables** for storing data.
- **Loops** (`for`, `while`, etc.) to repeat tasks.
- **Conditionals** (`if`, `else`, `case`) for decision-making.
- **Functions** to modularize code.

Bash scripting is a great skill for system administrators, developers, and anyone looking to enhance productivity through automation.

SCRIPT: 

A **script** is a file that contains a series of commands written in a programming or scripting language (like Bash, Python, or JavaScript). When executed, the script runs those commands in sequence to perform specific tasks or automate processes.

Why do we use scripts?
1. **Automation**: Scripts automate repetitive tasks, such as backups, file management, or system maintenance, saving time and effort.
2. **Efficiency**: Once written, scripts can be run multiple times without manual intervention, improving workflow.
3. **Error Reduction**: By automating tasks, scripts minimize the chances of human error.
4. **Consistency**: Scripts ensure tasks are executed the same way every time.
5. **Customization**: Scripts allow users to customize tasks to fit their needs, such as setting up environment variables or configuring systems.

In short, scripts streamline processes and enhance productivity in various computing environments.



Basic syntax:


#!/bin/bash

# This is a simple script to demonstrate basic Bash syntax
# It checks if a file exists and counts the number of lines in the file.

# 1. Defining variables
file_name="sample.txt"    # A variable to store the filename
line_count=0              # A variable to store the line count, initialized to 0

# 2. Checking if the file exists
if [ -f "$file_name" ]; then
    # If the file exists, print a message
    echo "The file '$file_name' exists."

    # 3. Counting the number of lines in the file using wc (word count)
    line_count=$(wc -l < "$file_name")  # The $(...) captures the output of the command

    # 4. Displaying the number of lines
    echo "The file '$file_name' has $line_count lines."
else
    # 5. If the file doesn't exist, print an error message
    echo "Error: The file '$file_name' does not exist."
fi

# 6. Loop example - printing numbers 1 to 5 using a for loop
echo "Loop Example: Numbers from 1 to 5"
for i in {1..5}; do
    echo "Number $i"  # Prints each number from 1 to 5
done

# 7. Function Example - Printing a greeting
greet() {
    # This is a simple function that takes an argument and prints a greeting message
    echo "Hello, $1!"  # $1 refers to the first argument passed to the function
}

# Calling the function with a name argument
greet "Alice"  # This will print "Hello, Alice!"
