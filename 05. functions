In , **functions** are a fundamental concept for organizing and reusing code. Functions allow you to group related commands together into a single unit, making your scripts more modular, readable, and maintainable. You can define a function in , call it, and pass arguments to it. Below is a detailed explanation of the key concepts around functions in .

### 1. **Defining a Function**

A function in  is defined using the following syntax:


function_name () {
  # commands
}


Or alternatively:


function function_name {
  # commands
}


The `function` keyword is optional, but its usage makes the code a bit more explicit.

#### Example of Function Definition:

greet() {
  echo "Hello, $1!"
}


In this example, the function `greet` takes one argument and prints a greeting message using `echo`.

### 2. **Calling a Function**

Once a function is defined, you can call it by simply typing its name, followed by any required arguments (if applicable).

#### Example:

greet "Alice"  # Calls the function "greet" with the argument "Alice"


This will output:

Hello, Alice!


### 3. **Function Arguments**

Functions in  can accept arguments. These arguments are passed to the function when it is called. Inside the function, these arguments are accessed using positional parameters:

- `$1`, `$2`, `$3`, etc., for the first, second, third, and so on arguments passed to the function.
- `$#` gives the number of arguments passed to the function.
- `$@` or `$*` gives all the arguments passed to the function as a list.
- `$0` is the name of the script itself (not used for function arguments but is included for completeness).

#### Example:

add_numbers() {
  sum=$(( $1 + $2 ))  # Adds the first and second arguments
  echo "Sum is: $sum"
}

add_numbers 5 10  # Calls the function with arguments 5 and 10


This will output:

Sum is: 15


### 4. **Return Values from Functions**

In , functions can return values, but they don’t return values in the same way as in many other programming languages. Instead,  functions typically use `echo` or `return` to pass information.

- **`echo`**: The `echo` command can be used to print a value to **stdout**, and you can capture the output of a function using command substitution (`$()`).
  
  #### Example with `echo`:
  
  multiply() {
    result=$(( $1 * $2 ))  # Multiplies the first and second arguments
    echo $result
  }

  result=$(multiply 3 4)  # Capture the result of the function call
  echo "Result is: $result"
  

  This will output:
  
  Result is: 12
  

- **`return`**: The `return` statement can return an exit status (a value between 0 and 255). This is generally used to indicate success or failure rather than returning actual data.
  
  #### Example with `return`:
  
  check_even() {
    if (( $1 % 2 == 0 )); then
      return 0  # Success (even number)
    else
      return 1  # Failure (odd number)
    fi
  }

  check_even 4
  if [[ $? -eq 0 ]]; then
    echo "The number is even."
  else
    echo "The number is odd."
  fi
  

  This will output:
  
  The number is even.
  

  In this example, `check_even` returns an exit code: `0` for even numbers and `1` for odd numbers.

### 5. **Local Variables in Functions**

In , variables defined inside a function are by default **global**. However, if you want to define variables that are local to the function (and do not affect the global scope), you can use the `local` keyword.

#### Example:

count() {
  local counter=0  # "counter" is local to the function
  counter=$(( counter + 1 ))
  echo $counter
}

count  # This will output "1"
echo $counter  # This will output nothing because "counter" is local


### 6. **Default Values for Function Arguments**

You can assign default values to function arguments if they are not provided by the user. This can be done using parameter expansion.

#### Example:

greet() {
  local name="${1:-Guest}"  # If no argument is provided, use "Guest" as the default value
  echo "Hello, $name!"
}

greet  # Outputs: Hello, Guest!
greet Alice  # Outputs: Hello, Alice!


In this case, the function `greet` will greet "Guest" if no name is passed as an argument, and otherwise, it will greet the specified name.

### 7. **Function Scope**

- **Global Scope**: Variables defined outside functions are available globally.
- **Local Scope**: Variables defined inside functions using `local` are only accessible within the function, and their scope is limited to the function's execution.

#### Example:

global_var="I'm a global variable"

scope_test() {
  local local_var="I'm a local variable"
  echo "Inside function: $global_var and $local_var"
}

scope_test
echo "Outside function: $global_var and $local_var"  # local_var is not accessible outside


This will output:

Inside function: I'm a global variable and I'm a local variable
Outside function: I'm a global variable and


### 8. **Recursive Functions**

Functions in  can call themselves, which is called **recursion**. This can be useful for solving problems that have a recursive structure (e.g., factorial calculation, tree traversal, etc.).

#### Example (Factorial Calculation):

factorial() {
  if (( $1 == 0 )); then
    echo 1
  else
    local temp=$(( $1 - 1 ))
    local result=$(factorial $temp)  # Recursive call
    echo $(( $1 * result ))
  fi
}

result=$(factorial 5)
echo "Factorial of 5 is: $result"


This will output:

Factorial of 5 is: 120


### 9. **Using `trap` with Functions**

 provides the `trap` command, which allows you to catch signals (like SIGINT from Ctrl+C) and run functions in response.

#### Example:

cleanup() {
  echo "Cleaning up before exit..."
}

trap cleanup EXIT  # Calls the cleanup function when the script exits

echo "This is a test script"


This will call the `cleanup` function when the script terminates, printing the "Cleaning up before exit..." message.

### 10. **Function Documentation**

It’s a good practice to add comments inside your functions to describe what they do, what parameters they expect, and what they return. This is especially useful in large scripts.

#### Example:

# Function to add two numbers
# Arguments:
#   $1 - First number
#   $2 - Second number
# Returns:
#   The sum of the two numbers
add() {
  echo $(( $1 + $2 ))
}


### Conclusion

 functions are a powerful way to organize code, enhance reusability, and manage complexity in scripts. Key concepts include defining functions, passing arguments, returning values, handling variable scope, and using recursion. By leveraging these concepts, you can write more modular, maintainable, and efficient  scripts.
